Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let DocumentSyncAdapter = class DocumentSyncAdapter {

  constructor(languageClient, documentSyncKind) {
    this._disposable = new _atom.CompositeDisposable();
    this._editors = new WeakMap();

    this._lc = languageClient;
    this._documentSyncKind = documentSyncKind;
    this._disposable.add(atom.textEditors.observe(this.observeTextEditors.bind(this)));
  }

  dispose() {
    this._disposable.dispose();
  }

  observeTextEditors(editor) {
    if (!this._editors.has(editor)) {
      const sync = new TextEditorSyncAdapter(editor, this._lc, this._documentSyncKind);
      this._editors.set(editor, sync);
      this._disposable.add(sync);
      this._disposable.add(editor.onDidDestroy(() => {
        this._editors.delete(editor);
        this._disposable.remove(sync);
        sync.dispose();
      }));
    }
  }
};
exports.default = DocumentSyncAdapter;
let TextEditorSyncAdapter = class TextEditorSyncAdapter {

  constructor(editor, languageClient, documentSyncKind) {
    this._disposable = new _atom.CompositeDisposable();
    this._version = 1;

    this._editor = editor;
    this._lc = languageClient;

    const changeTracking = this.setupChangeTracking(documentSyncKind);
    if (changeTracking != null) {
      this._disposable.add(changeTracking);
    }

    this._disposable.add(editor.onDidSave(this.didSave.bind(this)), editor.onDidDestroy(this.didDestroy.bind(this)));

    this.didOpen();
  }

  setupChangeTracking(documentSyncKind) {
    switch (documentSyncKind) {
      case _languageclient.TextDocumentSyncKind.Full:
        return this._editor.onDidChange(this.editorChangeSendFull.bind(this));
      case _languageclient.TextDocumentSyncKind.Incremental:
        // TODO: Switch to onDidChangeText when the API includes oldText.
        return this._editor.getBuffer().onDidChange(this.bufferChangeSendIncrement.bind(this));
    }
    return null;
  }

  dispose() {
    this._disposable.dispose();
  }

  getLanguageId() {
    return this._editor.getGrammar().name;
  }

  getVersionedTextDocumentIdentifier() {
    return {
      uri: this.getEditorUri(),
      version: this._version
    };
  }

  didOpen() {
    this._lc.didOpenTextDocument({
      textDocument: {
        uri: this.getEditorUri(),
        languageId: this.getLanguageId().toLowerCase(),
        version: this._version,
        text: this._editor.getText()
      }
    });
  }

  editorChangeSendFull() {
    this._version++;
    this._lc.didChangeTextDocument({
      textDocument: this.getVersionedTextDocumentIdentifier(),
      contentChanges: [{ text: this._editor.getText() }]
    });
  }

  bufferChangeSendIncrement(event) {
    this._version++;
    this._lc.didChangeTextDocument({
      textDocument: this.getVersionedTextDocumentIdentifier(),
      contentChanges: [TextEditorSyncAdapter.textEditToContentChange(event)]
    });
  }

  static textEditToContentChange(change) {
    return {
      range: _convert2.default.atomRangeToLSRange(change.oldRange),
      rangeLength: change.oldText.length,
      text: change.newText
    };
  }

  didDestroy() {
    this._lc.didCloseTextDocument({ textDocument: { uri: this.getEditorUri() } });
  }

  didSave() {
    this._lc.didSaveTextDocument({ textDocument: { uri: this.getEditorUri() } });
    this._lc.didChangeWatchedFiles({ changes: [{ uri: this.getEditorUri(), type: _languageclient.FileChangeType.Changed }] });
  }

  getEditorUri() {
    return _convert2.default.pathToUri(this._editor.getURI() || '');
  }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
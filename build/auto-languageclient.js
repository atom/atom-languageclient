Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _child_process = require('child_process');

var cp = _interopRequireWildcard(_child_process);

var _languageclient = require('./languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _consoleLogger = require('./loggers/console-logger');

var _consoleLogger2 = _interopRequireDefault(_consoleLogger);

var _nullLogger = require('./loggers/null-logger');

var _nullLogger2 = _interopRequireDefault(_nullLogger);

var _autocompleteAdapter = require('./adapters/autocomplete-adapter');

var _autocompleteAdapter2 = _interopRequireDefault(_autocompleteAdapter);

var _documentSyncAdapter = require('./adapters/document-sync-adapter');

var _documentSyncAdapter2 = _interopRequireDefault(_documentSyncAdapter);

var _formatCodeAdapter = require('./adapters/format-code-adapter');

var _formatCodeAdapter2 = _interopRequireDefault(_formatCodeAdapter);

var _linterAdapter = require('./adapters/linter-adapter');

var _linterAdapter2 = _interopRequireDefault(_linterAdapter);

var _notificationsAdapter = require('./adapters/notifications-adapter');

var _notificationsAdapter2 = _interopRequireDefault(_notificationsAdapter);

var _nuclideDefinitionAdapter = require('./adapters/nuclide-definition-adapter');

var _nuclideDefinitionAdapter2 = _interopRequireDefault(_nuclideDefinitionAdapter);

var _nuclideFindReferencesAdapter = require('./adapters/nuclide-find-references-adapter');

var _nuclideFindReferencesAdapter2 = _interopRequireDefault(_nuclideFindReferencesAdapter);

var _nuclideHyperclickAdapter = require('./adapters/nuclide-hyperclick-adapter');

var _nuclideHyperclickAdapter2 = _interopRequireDefault(_nuclideHyperclickAdapter);

var _nuclideOutlineViewAdapter = require('./adapters/nuclide-outline-view-adapter');

var _nuclideOutlineViewAdapter2 = _interopRequireDefault(_nuclideOutlineViewAdapter);

var _atom = require('atom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let AutoLanguageClient = class AutoLanguageClient {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
  }

  getGrammarScopes() {
    throw "Must implement getGrammarScopes when extending AutoLanguageClient";
  }
  getLanguageName() {
    throw "Must implement getLanguageName when extending AutoLanguageClient";
  }
  getServerName() {
    throw "Must implement getServerName when extending AutoLanguageClient";
  }

  activate() {
    this.name = `${this.getLanguageName()} (${this.getServerName()})`;
    this.logger = atom.config.get('core.debugLSP') ? new _consoleLogger2.default(this.name) : new _nullLogger2.default();
    this.startServer();
  }

  deactivate() {
    this._disposable.dispose();

    if (this._lc) {
      this._lc.shutdown();
    }

    if (this._process != null) {
      this._process.kill();
      this._process = null;
    };
  }

  startServer() {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this._process != null) return;

      _this._process = yield _this.startServerProcess();

      const connection = rpc.createMessageConnection(new rpc.StreamMessageReader(_this._process.stdout), new rpc.StreamMessageWriter(_this._process.stdin), { error: function (m) {
          _this.logger.error(m);
        } });

      _this._lc = new ls.LanguageClientConnection(connection, _this.logger);
      _this._lc.onLogMessage(function (m) {
        return _this.logger.log(['Log', m]);
      });
      _this.preInitialization();

      const initializeResponse = yield _this._lc.initialize(_this.getInitializeParams());
      _this.adaptCapabilities(initializeResponse.capabilities);
      _this.postInitialization(initializeResponse);
    })();
  }

  startServerProcess() {
    throw "Must override startServerProcess to start the language server process when extending AutoLanguageClient";
  }

  getProjectRoot() {
    const rootDirs = atom.project.getDirectories();
    return rootDirs.length > 0 ? rootDirs[0].path : null;
  }

  getInitializeParams() {
    return {
      processId: process.pid,
      capabilities: {},
      rootPath: this.getProjectRoot()
    };
  }

  adaptCapabilities(capabilities) {
    this.linter = new _linterAdapter2.default(this._lc);
    if (capabilities.completionProvider) {
      this.autoComplete = new _autocompleteAdapter2.default(this._lc);
    }
    if (capabilities.definitionProvider) {
      this.definitions = new _nuclideDefinitionAdapter2.default(this._lc);
      this.hyperclick = new _nuclideHyperclickAdapter2.default(this._lc);
    }
    if (capabilities.documentSymbolProvider) {
      this.outlineView = new _nuclideOutlineViewAdapter2.default(this._lc, this.name);
    }
    if (capabilities.referencesProvider) {
      this.findReferences = new _nuclideFindReferencesAdapter2.default(this._lc);
    }

    new _notificationsAdapter2.default(this._lc, this.name);

    if (capabilities.textDocumentSync) {
      this._disposable.add(new _documentSyncAdapter2.default(this._lc, capabilities.textDocumentSync));
    }
    if (capabilities.documentRangeFormattingProvider || capabilities.documentFormattingProvider) {
      this._disposable.add(new _formatCodeAdapter2.default(this._lc, capabilities.documentRangeFormattingProvider === true, capabilities.documentFormattingProvider === true, this.getGrammarScopes()));
    }
  }

  preInitialization() {}

  postInitialization(InitializationResult) {}

  // Atom Autocomplete+ via LS completion

  provideAutocomplete() {
    return {
      selector: '.source',
      excludeLowerPriority: false,
      getSuggestions: this.getSuggestions.bind(this)
    };
  }

  getSuggestions(request) {
    return this.autoComplete != null ? this.autoComplete.getSuggestions(request) : Promise.resolve([]);
  }

  // Nuclide Definitions via LS documentHighlight and gotoDefinition

  provideDefinitions() {
    return {
      name: this.name,
      priority: 20,
      grammarScopes: this.getGrammarScopes(),
      getDefinition: this.getDefinition.bind(this),
      getDefinitionById: this.getDefinitionById.bind(this)
    };
  }

  getDefinition(editor, point) {
    return this.definitions != null ? this.definitions.getDefinition(editor, point) : Promise.resolve(null);
  }

  getDefinitionById(filename, id) {
    return Promise.resolve(null); // TODO: Is this needed?
  }

  // Nuclide Outline View via LS documentSymbol

  provideOutlines() {
    return {
      name: this.name,
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  getOutline(editor) {
    return this.outlineView != null ? this.outlineView.getOutline(editor) : Promise.resolve(null);
  }

  // Linter API via LS publishDiagnostics

  provideLinter() {
    return {
      name: this.name,
      grammarScopes: this.getGrammarScopes(),
      scope: 'project',
      lintOnFly: true,
      lint: this.getLinting.bind(this)
    };
  }

  getLinting(editor) {
    return this.linter != null ? this.linter.provideDiagnostics() : Promise.resolve([]);
  }

  // Nuclide Find References via LS findReferences

  provideFindReferences() {
    return {
      isEditorSupported: editor => this.getGrammarScopes().includes(editor.getGrammar().scopeName),
      findReferences: this.getReferences.bind(this)
    };
  }

  getReferences(editor, point) {
    return this.findReferences != null ? this.findReferences.getReferences(editor, point, this.getProjectRoot()) : Promise.resolve(null);
  }

  // Nuclide Hyperlick via LS gotoDefinition and documentHighlight

  provideHyperclick() {
    return {
      priority: 20,
      providerName: this.name,
      getSuggestion: this.getHyperclickSuggestion.bind(this)
    };
  }

  getHyperclickSuggestion(editor, point) {
    return this.hyperclick != null ? this.hyperclick.getSuggestion(editor, point) : Promise.resolve(null);
  }
};
exports.default = AutoLanguageClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
export type nuclide$OutlineProvider = {
  name: string,
  // If there are multiple providers for a given grammar, the one with the highest priority will be
  // used.
  priority: number,
  grammarScopes: Array<string>,
  updateOnEdit?: boolean,
  getOutline: (editor: TextEditor) => Promise<?Outline>,
};

export type nuclide$OutlineTree = {
  icon?: string, // from atom$Octicon (that type's not allowed over rpc so we use string)

  // Must be one or the other. If both are present, tokenizedText is preferred.
  plainText?: string,
  tokenizedText?: TokenizedText,
  representativeName?: string,

  startPosition: atom$Point,
  endPosition?: atom$Point,
  children: Array<nuclide$OutlineTree>,
};

export type nuclide$Outline = {
  outlineTrees: Array<nuclide$OutlineTree>,
};

export type nuclide$TokenKind = 'keyword'
  | 'class-name'
  | 'constructor'
  | 'method'
  | 'param'
  | 'string'
  | 'whitespace'
  | 'plain'
  | 'type'
  ;

export type nuclide$TextToken = {
  kind: nuclide$TokenKind,
  value: string,
};

export type nuclide$TokenizedText = Array<nuclide$TextToken>;

export type nuclide$DefinitionProvider = {
  name: string,
  priority: number,
  grammarScopes: Array<string>,
  getDefinition: (editor: atom$TextEditor, position: atom$Point) => Promise<?nuclide$DefinitionQueryResult>,
  // filename is any file/path in the project containing id.
  getDefinitionById: (filename: NuclideUri, id: string) => Promise<?nuclide$Definition>,
};

export type NuclideUri = string;

export type nuclide$Definition = {
  path: NuclideUri,
  position: atom$Point,
  range?: atom$Range,
  id?: string,
  name?: string,
  language: string,
  projectRoot?: NuclideUri,
};

export type nuclide$DefinitionQueryResult = {
  queryRange: Array<atom$Range>,
  definitions: Array<nuclide$Definition>,
};

export type nuclide$HyperclickProvider = {
  // Use this to provide a suggestion for single-word matches.
  // Optionally set `wordRegExp` to adjust word-matching.
  getSuggestionForWord?: (textEditor: atom$TextEditor, text: string, range: atom$Range) => Promise<?nuclide$HyperclickSuggestion>,
  wordRegExp?: RegExp,

  // Use this to provide a suggestion if it can have non-contiguous ranges.
  // A primary use-case for this is Objective-C methods.
  getSuggestion?: (textEditor: atom$TextEditor, position: atom$Point) => Promise<?nuclide$HyperclickSuggestion>,

  // The higher this is, the more precedence the provider gets. Defaults to 0.
  priority?: number,
  providerName?: string,
};

export type nuclide$HyperclickSuggestion = {
  // The range(s) to underline to provide as a visual cue for clicking.
  range: ?atom$Range | ?Array<atom$Range>,

  // The function to call when the underlined text is clicked.
  callback: (() => mixed) | Array<{rightLabel?: string, title: string, callback: () => mixed}>,
};

export type nuclide$FindReferencesProvider = {
  // Return true if your provider supports finding references for the provided TextEditor.
  isEditorSupported(editor: atom$TextEditor): Promise<boolean>,

  // `findReferences` will only be called if `isEditorSupported` previously returned true
  // for the given TextEditor.
  findReferences(editor: atom$TextEditor, position: atom$Point): Promise<?nuclide$FindReferencesReturn>,
};

export type nuclide$Reference = {
  uri: NuclideUri,      // Nuclide URI of the file path
  name: ?string,    // name of calling method/function/symbol
  range: atom$Range,
};

export type nuclide$FindReferencesData = {
  type: 'data',
  baseUri: NuclideUri,
  referencedSymbolName: string,
  references: Array<nuclide$Reference>,
};

export type nuclide$FindReferencesError = {
  type: 'error',
  message: string,
};

export type nuclide$FindReferencesReturn = nuclide$FindReferencesData | nuclide$FindReferencesError;

export type nuclide$MarkedString =
  | {
      type: 'markdown',
      value: string,
    }
  | {
      type: 'snippet',
      grammar: atom$Grammar,
      value: string,
    };

// This omits the React variant.
export type nuclide$Datatip = {|
  markedStrings: Array<nuclide$MarkedString>,
  range: atom$Range,
  pinnable?: boolean,
|};

export type nuclide$DatatipProvider = {
  datatip(
    editor: atom$TextEditor,
    bufferPosition: atom$Point,
    // The mouse event that triggered the datatip.
    // This is null for manually toggled datatips.
    mouseEvent: ?MouseEvent,
  ): Promise<?Datatip>,
  inclusionPriority: number,
  validForScope(scopeName: string): boolean,
  // A unique name for the provider to be used for analytics.
  // It is recommended that it be the name of the provider's package.
  providerName: string,
};

export type nuclide$DatatipService = {
  addProvider(provider: nuclide$DatatipProvider): IDisposable,
};
